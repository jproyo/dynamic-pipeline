name:       dynamic-pipeline
version:    0.1.0.0
category:   Data,Data Flow,Pipes,Streaming,Parallel,Type-safe
author:     Juan Pablo Royo Sales
maintainer: juanpablo.royo@gmail.com
copyright:  Copyright (C) 2021 Juan Pablo Royo Sales
license:    BSD3
github:     jproyo/dynamic-pipeline
description: |
  @dynamic-pipeline@ is a __/Type Safe/__ Dynamic and Parallel Streaming Library, which is an implementation of __Dynamic Pipeline Paradigm (DPP)__ 
  proposed in this paper [DPP](https://biblioteca.sistedes.es/articulo/the-dynamic-pipeline-paradigm/).
  .
  The aim of this tool is to provide all the __Type level__ constructs to guide the user in building a /DPP/ flow to solve any algorithm that fits on 
  this computational model. 
  .
  The idea behind the implementation is similar to other __Type level__ programming libraries like [@servant@](https://hackage.haskell.org/package/servant)
  . 
  Some of the feature of this library includes:
  .
  * /Small Number of Dependencies/: Dependencies have been kept to minimum in order to reduce compilation time.
  .
  * /Type Level Encoding/: As it was explained before, there is an intensive use of Type Level techniques in the Library in order to guide the user in 
  defining the Flow Model and fill the gaps with the combinators provided and the Compiler indications. On the other hand some /Type Custom Errors/ have been
  encoded in the Library in order to provide meaningful messages about the Data Flow Grammar Defined in /DPP/.
  .
  * /Stream Parallelization/: __DPP__ model follows a /Parallelization Pipeline/ approach with the use of intermediate Channels. All the burden have been hidden 
  for the user in order to reduce complexity and focus on the algorithm problem implementations.
  .
  * /Safe Scoped Execution/: Use of Existential to define the Scope execution of /DPP/ reducing even more the complexity to the user.
  .
  Import "DynamicPipeline" for using the library.
  .
  * /Examples/: <src/examples examples directory> in the package

extra-source-files:
- README.md

ghc-options:
  - -Wall
  - -fno-warn-partial-type-signatures
  - -fconstraint-solver-iterations=0
  - -fspecialise-aggressively
  - -fexpose-all-unfoldings
  - -flate-specialise
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wno-unused-top-binds
  - -Wno-unused-foralls
  - -fno-warn-deprecations
  - -fno-warn-orphans

default-extensions:
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - DerivingVia
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NoImplicitPrelude
  - OverloadedStrings
  - PackageImports
  - PartialTypeSignatures
  - PolyKinds
  - Rank2Types
  - RankNTypes
  - RecordWildCards
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeOperators
  - TypeFamilies

dependencies:
  - base >= 4.7 && < 5
  - async
  - bytestring
  - compdata
  - HList == 0.5.*
  - lens
  - relude >= 1.0.0.0
  - unagi-chan

library:
  when:
  - condition: false
    other-modules: Paths_dynamic_pipeline
  source-dirs: src
  exposed-modules:
    - DynamicPipeline

executables:
  examples:
    when:
    - condition: false
      other-modules: Paths_dynamic_pipeline
    source-dirs:
      examples
    main:
      Main.hs
    dependencies:
      - dynamic-pipeline
      - async
      - HList
      - optparse-applicative
      - trifecta
    ghc-options:
      - -threaded
      - -O3
      - -rtsopts
      - -with-rtsopts=-N

tests:
  conn-comp-tests:
    main: Spec.hs
    source-dirs:
      - test
    build-tools:
      - hspec-discover
    ghc-options:
      - -threaded
      - -O2
      - -rtsopts
      - -with-rtsopts=-N
      - -Wno-unused-local-binds
      - -Wno-unused-matches
    dependencies:
      - dynamic-pipeline
      - hspec == 2.*
      - QuickCheck
      - relude >= 1.0.0.0
      

